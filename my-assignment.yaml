AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This is a stack where SNS publishes to SQS, that then messages the lambda
  which console.logs the message
Parameters:
  LambdaBucket:
    Type: "String"
    Default: casestack-lambda-code-dev
    AllowedValues:
      - casestack-lambda-code-dev
    Description: S3 bucket that contains lambda code
  ProjectBucketName:
    Type: String
    Default: brian-hippogriff-bucket
    Description: Brian's bucket

Resources:
  #SNS Topic
  BriansStackSNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: !Sub '${AWS::StackName}_topic'
      TopicName: !Sub '${AWS::StackName}_topic'
      Subscription:
        - Endpoint: !GetAtt 
            - BriansStackQueue
            - Arn
          Protocol: sqs
  #Queue 
  BriansStackQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub '${AWS::StackName}_Queue'
      DelaySeconds: 15
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BriansStackDeadQueue.Arn
        maxReceiveCount: 2
  #DeadQueue
  BriansStackDeadQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub '${AWS::StackName}_DeadQueue'
  #Queue Policy
  BriansQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Id: BriansQueuePolicy
        Version: 2012-10-17
        Statement:
          - Sid: Allow SQS to receive msgs from SNS
            Effect: Allow
            Principal: 
              Service: sns.amazonaws.com
            Action: 
              - 'sqs:SendMessage'
            Resource: !GetAtt BriansStackQueue.Arn
          - Sid: Allow SQS to receive notification from S3
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - 'sqs:SendMessage'
            Resource: !GetAtt BriansStackQueue.Arn
            
      Queues:
        - !Ref BriansStackQueue
  #Lambda function
  BriansStackFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AWS::StackName}_logger
      Description: "This uploads file to s3 bucket"
      Handler: lambda/brian-lambda.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        S3Bucket: !Ref LambdaBucket
        S3Key: BriansStack.zip
      Runtime: nodejs12.x
      Timeout: 60
      Environment:
        Variables:
          SOURCE_BUCKET: !Ref ProjectBucketName
  #Lambda Role        
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-execution-role
      Description: "This should upload file to S3"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: #principal is the entity making request
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: sqs
          PolicyDocument: 
            Statement: 
            - Effect: Allow
              Action: 
              - sqs:ReceiveMessage #allow lambda to make a request to  receive message from sqs
              - sqs:DeleteMessage  #I had to add this or stack won't be created
              - sqs:GetQueueAttributes
              Resource: 
                  - !GetAtt BriansStackQueue.Arn
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:PutObject
              - s3:GetObject
              Resource:
                - !GetAtt BriansStackBucket.Arn
                - !Sub arn:aws:s3:::${ProjectBucketName}

  #Lambda Event Source Mapping
  BriansStackEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
        FunctionName: !Ref BriansStackFunction
        EventSourceArn: !GetAtt BriansStackQueue.Arn

  #S3 Bucket
  BriansStackBucket:
    DependsOn:
      - BriansStackQueue
      - BriansQueuePolicy
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
        BucketName: !Ref ProjectBucketName
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:* 
              Queue: !GetAtt BriansStackQueue.Arn


  #S3 Bucket Policy
  BriansStackBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BriansStackBucket
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Principal: '*'
            Resource:
              - !Sub ${BriansStackBucket.Arn}
              - !Sub ${BriansStackBucket.Arn}/*        



