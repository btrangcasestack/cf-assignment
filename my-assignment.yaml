AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This is a stack where SNS publishes to SQS, that then messages the lambda
  which console.logs the message
Parameters:
  LambdaBucket:
    Type: "String"
    Default: casestack-lambda-code-dev
    AllowedValues:
      - casestack-lambda-code-dev
    Description: S3 bucket that contains lambda code
Resources:
#SNS resources
  BriansStackSNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: !Sub '${AWS::StackName}_topic'
      TopicName: !Sub '${AWS::StackName}_topic'
      Subscription:
        - Endpoint: !GetAtt 
            - BriansStackQueue
            - Arn
          Protocol: sqs

#SQS resources
  BriansStackQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub ${AWS::StackName}_BriansStack
      DelaySeconds: 15
      VisibilityTimeout: 60

  BriansQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Id: BriansQueuePolicy
        Version: 2012-10-17
        Statement:
          - Sid: Allow SQS to receive msgs from SNS
            Effect: Allow
            Principal: 
              Service: sns.amazonaws.com
            Action: 
              - 'sqs:SendMessage'
            Resource: '*'
      Queues:
        - !Ref BriansStackQueue


#lambdas require a role and a function
  BriansStackFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AWS::StackName}_logger
      Description: "This function logs events from SQS"
      Handler: lambda/brian-lambda.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        S3Bucket: !Ref LambdaBucket
        S3Key: BriansStack.zip
      Runtime: nodejs12.x
      Timeout: 60
      
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-execution-role
      Description: "This should log event stuff"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: sqs
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource: 
                - !GetAtt BriansStackQueue.Arn

  BriansStackEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
        FunctionName: !Ref BriansStackFunction
        EventSourceArn: !GetAtt BriansStackQueue.Arn

      

