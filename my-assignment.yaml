AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This is a stack where SNS publishes to SQS, that then messages the lambda
  which console.logs the message
Parameters:
  LambdaBucket:
    Type: "String"
    Default: casestack-lambda-code-dev
    AllowedValues:
      - casestack-lambda-code-dev
    Description: S3 bucket that contains lambda code
  MyMessage:
    NoEcho: 'true'
    Type: String
    Description: Message for Lambda
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
Resources:
#SNS resources
  MySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt 
            - MyQueue1
            - Arn
          Protocol: sqs
#SQS resources
  MyQueue1:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 15
      VisibilityTimeout: 60

  MyQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Id: MyQueuePolicy
        Statement:
          - Sid: Allow SQS to receive msgs from SNS
            Effect: Allow
            Principal: 
              AWS: '*'
            Action: 
              - 'sqs:SendMessage'
              - 'sqs:ReceiveMessage'
            Resource: '*'
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref MySNSTopic
      Queues:
        - !Ref MyQueue1
#lambdas require a role and a function
  LogMessage:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: lambda/brian-lambda.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        S3Bucket: !Ref LambdaBucket
        S3Key: BriansStack.zip
      Runtime: nodejs12.x
      Timeout: 60
      
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "This should log event stuff"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: sqs
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource: 
                - !GetAtt MyQueue1.Arn
  MyEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
        FunctionName: !Ref LogMessage
        EventSourceArn: !GetAtt MyQueue1.Arn

      

